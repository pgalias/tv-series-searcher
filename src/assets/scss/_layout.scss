@import "mixins";
@import "mq";

$gutter: 30px;
$column-count: 12;
$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
);
$main-axis-alignment: (
  center: 'center',
  start: 'flex-start',
  end: 'flex-end',
  between: 'space-between',
  around: 'space-around',
  stretch: 'stretch'
);
$cross-axis-alignment: (
  center: 'center',
  start: 'flex-start',
  end: 'flex-end',
  stretch: 'stretch',
);

@mixin column-styles($size) {
  flex: 0 0 percentage($size / $column-count);
  max-width: percentage($size / $column-count);
}

.container {
  @include same(padding-right padding-left, $gutter/2);
  @include same(margin-right margin-left, auto);

  @each $breakpoint, $max-width in $container-max-widths {
    @include from($breakpoint) {
      max-width: $max-width;
    }
  }
}

.row {
  @include same(margin-right margin-left, -$gutter/2);
  display: flex;
  flex-wrap: wrap;
}

[class*=xs-],
[class*=sm-],
[class*=md-],
[class*=lg-],
[class*=xl-] {
  @include same(padding-right padding-left, $gutter/2);
}

@for $i from 1 through 12 {
  @each $breakpoint in map-keys($grid-breakpoints) {
    @if $breakpoint == 'xs' {
      .xs-#{$i} { @include column-styles($i)}
    } @else {
      .#{$breakpoint}-#{$i} {
        @include from($breakpoint) {
          @include column-styles($i);
        }
      }
    }
  }
}

@each $m-class, $m-value in $main-axis-alignment {
  @each $c-class, $c-value in $cross-axis-alignment {
    @each $breakpoint in map-keys($grid-breakpoints) {
      @if $breakpoint == 'xs' {
        .align-#{$m-class}-#{$c-class} {
          justify-content: unquote($m-value);
          align-content: unquote($c-value);
          align-items: unquote($c-value);
        }
      } @else {
        .align-#{$breakpoint}-#{$m-class}-#{$c-class} {
          @include from($breakpoint) {
            justify-content: unquote($m-value);
            align-content: unquote($c-value);
            align-items: unquote($c-value);
          }
        }
      }
    }
  }
}

